{"version":3,"sources":["components/chat/index.style.js","components/chat/background.png","components/message/index.js","components/chat/index.js","components/user/index.style.js","components/user/index.js","App.js","redux/reducers/user.js","redux/reducers/friends.js","redux/reducers/messages.js","redux/reducers/index.js","redux/index.js","reportWebVitals.js","index.js"],"names":["Frame","styled","div","ChatTab","ChatContentWrapper","ChatContent","ActionFrame","avatar_color","randomColor","Message","name","message","isMine","time","useSelector","state","user","username","style","marginBottom","display","flexDirection","alignItems","maxWidth","justifyContent","backgroundColor","padding","borderRadius","color","fontSize","overflowWrap","size","marginRight","charAt","toUpperCase","paddingRight","paddingLeft","position","ChatFrame","socket","useState","currMess","setCurrMess","messages","sendMessage","current","emit","console","log","useMemo","backgroundImage","Background","orientation","map","mess","index","value","onChange","e","text","target","height","margin","placeholder","onKeyPress","event","key","onClick","type","OnlineUser","UserFrame","friends","Object","entries","filter","i","App","useRef","dispatch","useDispatch","useEffect","io","connect","on","payload","clients","data","background","isMobile","initialState","reducer","action","myReducer","combineReducers","store","createStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wiDAEA,IAAMA,EAAQC,IAAOC,IAAV,KAULC,EAAUF,IAAOC,IAAV,KAOPE,EAAqBH,IAAOC,IAAV,KAMlBG,EAAcJ,IAAOC,IAAV,KAgBXI,EAAcL,IAAOC,IAAV,K,2BCzCF,MAA0B,uC,0BCKnCK,EAAeC,IAgCNC,EA/BC,SAAC,GAA6B,IAAD,EAA1BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,QAElBC,GAFsC,EAAXC,KACZC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QAAxCC,WACoBP,GAC5B,OACC,qBAAKQ,MAAO,CAAEC,aAAc,GAA5B,SAEEP,EAAU,qBAAKM,MAAO,CAAEE,QAAS,OAAQC,cAAe,cAAeC,WAAY,UAAzE,SACT,qBAAKJ,MAAO,CAAEK,SAAU,MAAOH,QAAS,OAAQC,cAAe,SAAUG,eAAgB,eAAgBC,gBAAiB,UAAWC,QAAS,EAAGC,aAAc,EAAGC,MAAO,SAAzK,SAIC,qBAAKV,MAAO,CAAEW,SAAU,OAAQC,aAAc,cAA9C,SACEnB,QAGO,sBAAKO,MAAO,CAAEE,QAAS,OAAQC,cAAe,MAAOC,WAAY,UAAjE,UACV,cAAC,IAAD,CAAQS,KAAK,UAAUb,MAAO,CAAEU,MAAO,QAASH,gBAAiBlB,EAAcyB,YAAa,GAA5F,gBAAkGtB,QAAlG,IAAkGA,GAAlG,UAAkGA,EAAMuB,OAAO,UAA/G,aAAkG,EAAiBC,gBACnH,sBAAKhB,MAAO,CAAEE,QAAS,OAAQC,cAAe,SAAUG,eAAgB,eAAgBC,gBAAiB,UAAWU,aAAc,GAAIC,YAAa,GAAIT,aAAc,EAAGC,MAAO,QAASS,SAAU,YAAlM,UACC,sBAAKnB,MAAO,CAAEW,SAAU,UAAxB,UACEnB,EADF,OAGA,qBAAKQ,MAAO,CAAEW,SAAU,OAAQC,aAAc,cAA9C,SACEnB,a,QCyBO2B,EA9CG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACDC,mBAAS,IADR,mBAC1BC,EAD0B,KAChBC,EADgB,KAE3BC,EAAW7B,aAAY,SAAAC,GAAK,OAAIA,EAAM4B,YACpC1B,EAAaH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QAAxCC,SACF2B,EAAc,WACfH,IACHF,EAAOM,QAAQC,KAAK,UAAW,CAAE7B,WAAUN,QAAS8B,IACpDC,EAAY,MAiBd,OALAK,QAAQC,IAAI,WAEZC,mBAAQ,WACPF,QAAQC,IAAIP,KACV,CAACA,IAEH,eAACzC,EAAD,CAAOkB,MAAO,CAAEgC,gBAAgB,OAAD,OAASC,EAAT,MAA/B,UACC,cAAChD,EAAD,UACC,cAAC,IAAD,CAASiD,YAAY,SAArB,gCAED,eAAChD,EAAD,WACC,cAACC,EAAD,UAEEsC,EAASU,KAAI,SAACC,EAAMC,GAAP,OACZ,cAAC,EAAD,CAAqB1C,KAAMyC,EAAKzC,KAAMH,KAAM4C,EAAKrC,SAAUN,QAAS2C,EAAK3C,SAA3D4C,QAIjB,eAACjD,EAAD,WACC,cAAC,IAAD,CAAOyB,KAAK,QAAQyB,MAAOf,EAAUgB,SAvBhB,SAACC,GACzB,IAAMC,EAAOD,EAAEE,OAAOJ,MACtBd,EAAYiB,IAqBwDzC,MAAO,CAAE2C,OAAQ,OAAQC,OAAQ,GAAInC,aAAc,IAAMoC,YAAY,OAAOC,WA5B1H,SAACC,GACL,UAAdA,EAAMC,KACTtB,OA2BE,cAAC,IAAD,CAAQuB,QAAS,kBAAMvB,KAAewB,KAAK,UAAUlD,MAAO,CAAE2C,OAAQ,OAAQC,OAAQ,GAAInC,aAAc,IAAxG,4B,qXC3CL,IAAM3B,EAAQC,IAAOC,IAAV,KAULmE,EAAapE,IAAOC,IAAV,K,SCaDoE,EApBG,WAAO,IAAD,IACjBtD,EAAOF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QAClCuD,EAAUzD,aAAY,SAAAC,GAAK,OAAIA,EAAMwD,WAC3C,OACC,eAAC,EAAD,WACC,eAAC,IAAD,CAASnB,YAAY,SAArB,iBAAsC,OAAJpC,QAAI,IAAJA,OAAA,EAAAA,EAAMC,WAAY,aACpD,wCAEEuD,OAAOC,QAAQF,UAFjB,iBAEE,EAAyBG,QAAO,SAAAC,GAAC,OAAIA,EAAE,MAAF,OAAS3D,QAAT,IAASA,OAAT,EAASA,EAAMC,oBAFtD,aAEE,EAA+DoC,KAAI,SAACrC,EAAMuC,GAAP,OAClE,eAACc,EAAD,WACC,cAAC,IAAD,CAAQtC,KAAM,QAASb,MAAO,CAAEU,MAAO,QAASH,gBAAiBjB,KAAjE,SAAmFQ,EAAK,GAAGiB,OAAO,GAAGC,YAAY,KADlH,OAEElB,EAAK,KAFUuC,YCiBRqB,MAxBf,WACE,IAAMrC,EAASsC,mBACTC,EAAWC,cAcjB,OAbAC,qBAAU,WACRzC,EAAOM,QAAUoC,IAAGC,QAAQ,2BAC5B3C,EAAOM,QAAQsC,GAAG,YAAY,YAAmB,IAAhBlE,EAAe,EAAfA,SAC/B6D,EAAS,CAAEV,KAAM,gBAAiBgB,QAAS,CAAEnE,iBAE/CsB,EAAOM,QAAQsC,GAAG,WAAW,SAACE,GAC5BP,EAAS,CAAEV,KAAM,cAAegB,QAAS,CAAEb,QAASc,QAEtD9C,EAAOM,QAAQsC,GAAG,qBAAqB,SAACG,GACtCR,EAAS,CAAEV,KAAM,eAAgBgB,QAASE,SAG3C,CAACR,IAEF,sBAAK5D,MAAO,CAAEqE,WAAY,UAAWnE,QAAS,OAAQI,eAAgB,SAAUF,WAAY,SAAUuC,OAAQ,SAA9G,UACE,cAAC,EAAD,CAAWtB,OAAQA,KACjBiD,YAAY,cAAC,EAAD,Q,QC3BhBC,EAAe,CACfxE,SAAU,UAWCyE,EARC,WAAmC,IAAlC3E,EAAiC,uDAAzB0E,EAAcE,EAAW,uCAC9C,MAAoB,kBAAhBA,EAAOvB,KACPrD,EAAQ4E,EAAOP,QAGZrE,GCTP0E,EAAe,GAUJC,EARC,WAAmC,IAAlC3E,EAAiC,uDAAzB0E,EAAcE,EAAW,uCAC9C,MAAoB,gBAAhBA,EAAOvB,KACPrD,EAAQ4E,EAAOP,QAAQb,QAGpBxD,G,SCPP0E,EAAe,GAUJC,EARC,WAAmC,IAAlC3E,EAAiC,uDAAzB0E,EAAcE,EAAW,uCAC9C,MAAoB,iBAAhBA,EAAOvB,KACPrD,EAAK,sBAAOA,GAAP,CAAc4E,EAAOP,UAGvBrE,GCMI6E,EAPGC,YAAgB,CAE9B7E,OACAuD,UACA5B,aCNWmD,EADDC,YAAYH,GCSXI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUb,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJc,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4acefe0c.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst Frame = styled.div`\r\n  background: white;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  border-radius: 10px; \r\n  display: 'flex';\r\n  flex-direction: 'column';\r\n  justify-content: 'flex-start'; \r\n`;\r\n\r\nconst ChatTab = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 50px;\r\n`;\r\n\r\nconst ChatContentWrapper = styled.div`\r\n  position: relative;\r\n  height: calc(100vh - 50px);\r\n  width: 100%;\r\n`\r\n\r\nconst ChatContent = styled.div`\r\n  height: calc(100vh - 50px - 40px - 15px);\r\n  width: 100%;\r\n  padding: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: overlay;\r\n  &::-webkit-scrollbar {\r\n    width: 0px;  /* Remove scrollbar space */\r\n    background: transparent;  /* Optional: just make scrollbar invisible */\r\n  }\r\n  /* Optional: show position indicator in red */\r\n  &::-webkit-scrollbar-thumb {\r\n      background: #FF0000;\r\n  }\r\n`\r\nconst ActionFrame = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  background-color: white;\r\n  position: absolute;\r\n  bottom: 12px;\r\n  left: 0px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n`\r\nexport { Frame, ChatTab, ChatContent, ChatContentWrapper, ActionFrame }","export default __webpack_public_path__ + \"static/media/background.501f4d51.png\";","import Avatar from 'antd/lib/avatar/avatar'\r\nimport { useSelector } from 'react-redux'\r\nimport React from 'react'\r\nimport * as randomColor from 'randomcolor'\r\n\r\nconst avatar_color = randomColor()\r\nconst Message = ({ name, message, time }) => {\r\n\tconst { username } = useSelector(state => state.user)\r\n\tconst isMine = username === name;\r\n\treturn (\r\n\t\t<div style={{ marginBottom: 5 }}>\r\n\t\t\t{\r\n\t\t\t\tisMine ? (<div style={{ display: 'flex', flexDirection: 'row-reverse', alignItems: 'center' }}>\r\n\t\t\t\t\t<div style={{ maxWidth: '80%', display: 'flex', flexDirection: 'column', justifyContent: 'space-around', backgroundColor: '#3A6EA5', padding: 5, borderRadius: 5, color: 'white' }}>\r\n\t\t\t\t\t\t{/* <div style={{ fontSize: '0.7rem', display: 'flex', justifyContent: 'flex-end' }}>\r\n\t\t\t\t\t\t\t{name}:\r\n\t\t\t\t\t\t</div> */}\r\n\t\t\t\t\t\t<div style={{ fontSize: '1rem', overflowWrap: 'break-word' }}>\r\n\t\t\t\t\t\t\t{message}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>) : (<div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n\t\t\t\t\t<Avatar size='default' style={{ color: 'white', backgroundColor: avatar_color, marginRight: 5 }}>{name?.charAt(0)?.toUpperCase()}</Avatar>\r\n\t\t\t\t\t<div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'space-around', backgroundColor: '#3A6EA5', paddingRight: 20, paddingLeft: 15, borderRadius: 5, color: 'white', position: 'relative' }}>\r\n\t\t\t\t\t\t<div style={{ fontSize: '0.6rem' }}>\r\n\t\t\t\t\t\t\t{name}:\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div style={{ fontSize: '1rem', overflowWrap: 'break-word' }}>\r\n\t\t\t\t\t\t\t{message}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div >)\r\n\t\t\t}\r\n\t\t</div >\r\n\t)\r\n}\r\n\r\nexport default Message;","import React, { useState, useMemo } from 'react'\r\nimport { Frame, ChatTab, ActionFrame, ChatContentWrapper, ChatContent } from './index.style'\r\nimport { Divider, Input, Button } from 'antd'\r\nimport Background from './background.png'\r\nimport Message from '../message'\r\nimport { useSelector } from 'react-redux'\r\nimport { isMobile } from 'react-device-detect'\r\nconst ChatFrame = ({ socket }) => {\r\n\tconst [currMess, setCurrMess] = useState(\"\");\r\n\tconst messages = useSelector(state => state.messages)\r\n\tconst { username } = useSelector(state => state.user)\r\n\tconst sendMessage = () => {\r\n\t\tif (currMess) {\r\n\t\t\tsocket.current.emit('message', { username, message: currMess })\r\n\t\t\tsetCurrMess(\"\");\r\n\t\t}\r\n\t}\r\n\tconst handleKeyPress = (event) => {\r\n\t\tif (event.key === 'Enter') {\r\n\t\t\tsendMessage()\r\n\t\t}\r\n\t}\r\n\tconst handleChangeText = (e) => {\r\n\t\tconst text = e.target.value\r\n\t\tsetCurrMess(text)\r\n\t}\r\n\tconsole.log(\"asdadad\")\r\n\r\n\tuseMemo(() => {\r\n\t\tconsole.log(currMess)\r\n\t}, [currMess])\r\n\treturn (\r\n\t\t<Frame style={{ backgroundImage: `url(${Background})` }}>\r\n\t\t\t<ChatTab>\r\n\t\t\t\t<Divider orientation='center'>XuanNghiem@hcmus</Divider>\r\n\t\t\t</ChatTab>\r\n\t\t\t<ChatContentWrapper >\r\n\t\t\t\t<ChatContent>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmessages.map((mess, index) => (\r\n\t\t\t\t\t\t\t<Message key={index} time={mess.time} name={mess.username} message={mess.message} />\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</ChatContent>\r\n\t\t\t\t<ActionFrame>\r\n\t\t\t\t\t<Input size='large' value={currMess} onChange={handleChangeText} style={{ height: '100%', margin: 10, borderRadius: 10 }} placeholder=\"type\" onKeyPress={handleKeyPress} />\r\n\t\t\t\t\t<Button onClick={() => sendMessage()} type='primary' style={{ height: '100%', margin: 10, borderRadius: 10 }}>SEND</Button>\r\n\t\t\t\t</ActionFrame>\r\n\t\t\t</ChatContentWrapper>\r\n\t\t</Frame>\r\n\t)\r\n}\r\n\r\nexport default ChatFrame;","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Frame = styled.div`\r\n  background: white;\r\n  width: 15vw;\r\n  margin-left: 20px;\r\n  height: 100vh;\r\n  border-radius: 10px; \r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst OnlineUser = styled.div`\r\n  margin: 10px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n`\r\nexport { Frame, OnlineUser }","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Frame, OnlineUser } from './index.style'\r\nimport { Divider, Avatar } from 'antd'\r\nimport * as randomColor from 'randomcolor'\r\n\r\nconst UserFrame = () => {\r\n\tconst user = useSelector(state => state.user)\r\n\tconst friends = useSelector(state => state.friends)\r\n\treturn (\r\n\t\t<Frame>\r\n\t\t\t<Divider orientation='center'>Hi {user?.username || \"unknown\"}</Divider>\r\n\t\t\t<div >\r\n\t\t\t\t{\r\n\t\t\t\t\tObject.entries(friends)?.filter(i => i[0] !== user?.username)?.map((user, index) => (\r\n\t\t\t\t\t\t<OnlineUser key={index}>\r\n\t\t\t\t\t\t\t<Avatar size={\"small\"} style={{ color: 'white', backgroundColor: randomColor() }}>{user[0].charAt(0).toUpperCase(0)}</Avatar>&nbsp;\r\n\t\t\t\t\t\t\t{user[0]}\r\n\t\t\t\t\t\t</OnlineUser>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</Frame>\r\n\t)\r\n}\r\n\r\nexport default UserFrame;","import React, { useEffect, useRef } from 'react'\r\nimport './App.css';\r\nimport io from \"socket.io-client\"\r\nimport { useDispatch } from 'react-redux'\r\nimport ChatFrame from './components/chat';\r\nimport UserFrame from './components/user';\r\nimport { isMobile } from 'react-device-detect'\r\n\r\nfunction App() {\r\n  const socket = useRef();\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    socket.current = io.connect('https://127.0.0.1:3000/');\r\n    socket.current.on('username', ({ username }) => {\r\n      dispatch({ type: 'SET_USER_INFO', payload: { username } })\r\n    })\r\n    socket.current.on('clients', (clients) => {\r\n      dispatch({ type: 'SET_FRIENDS', payload: { friends: clients } });\r\n    })\r\n    socket.current.on(\"message_is_coming\", (data) => {\r\n      dispatch({ type: 'PUSH_MESSAGE', payload: data });\r\n    })\r\n\r\n  }, [dispatch])\r\n  return (\r\n    <div style={{ background: '#A99985', display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\r\n      <ChatFrame socket={socket} />\r\n      {!isMobile && <UserFrame />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","let initialState = {\r\n    username: \"nghiem\"\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    if (action.type === 'SET_USER_INFO') {\r\n        state = action.payload\r\n        return state\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer;","let initialState = {};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    if (action.type === 'SET_FRIENDS') {\r\n        state = action.payload.friends;\r\n        return state\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer;","let initialState = [];\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    if (action.type === 'PUSH_MESSAGE') {\r\n        state = [...state, action.payload]\r\n        return state\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer;","import { combineReducers } from 'redux'\r\nimport chat from './chat'\r\nimport user from './user'\r\nimport friends from './friends'\r\nimport messages from './messages'\r\n\r\nconst myReducer = combineReducers({\r\n    // chat,\r\n    user,\r\n    friends,\r\n    messages\r\n});\r\n\r\nexport default myReducer;","import { createStore } from 'redux'\r\nimport myReducer from './reducers'\r\n\r\nconst store = createStore(myReducer)\r\nexport default store","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './redux/index'\r\nimport { Provider } from 'react-redux'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}